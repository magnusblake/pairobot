#!/usr/bin/env node
/**
 * PairBot Unified Launcher
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ:
 * - Bot Service (–ø–æ—Ä—Ç 3002)
 * - API Server (–ø–æ—Ä—Ç 3001)
 * - Frontend Dev Server (–ø–æ—Ä—Ç 5173)
 */

import { spawn, ChildProcess } from 'child_process';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.join(__dirname, '..');

interface Service {
  name: string;
  command: string;
  args: string[];
  color: string;
  cwd: string;
  process?: ChildProcess;
}

class UnifiedLauncher {
  private services: Service[] = [];
  private isShuttingDown = false;

  constructor() {
    this.services = [
      {
        name: 'Bot Service',
        command: 'tsx',
        args: ['src/bot/index.ts'],
        color: '\x1b[36m', // Cyan
        cwd: rootDir
      },
      {
        name: 'API Server',
        command: 'tsx',
        args: ['src/server/api.ts'],
        color: '\x1b[33m', // Yellow
        cwd: rootDir
      },
      {
        name: 'Frontend',
        command: 'vite',
        args: [],
        color: '\x1b[35m', // Magenta
        cwd: rootDir
      }
    ];
  }

  private log(serviceName: string, message: string, color: string) {
    const timestamp = new Date().toLocaleTimeString('ru-RU');
    const reset = '\x1b[0m';
    console.log(`${color}[${timestamp}] [${serviceName}]${reset} ${message}`);
  }

  private startService(service: Service): Promise<void> {
    return new Promise((resolve, reject) => {
      this.log(service.name, `–ó–∞–ø—É—Å–∫...`, service.color);

      const proc = spawn(service.command, service.args, {
        cwd: service.cwd,
        shell: true,
        stdio: ['ignore', 'pipe', 'pipe'],
        env: { ...process.env, FORCE_COLOR: '1' }
      });

      service.process = proc;

      let startupTimeout: NodeJS.Timeout;
      let hasStarted = false;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ stdout
      proc.stdout?.on('data', (data: Buffer) => {
        const output = data.toString();
        const lines = output.split('\n').filter(line => line.trim());
        
        lines.forEach(line => {
          this.log(service.name, line, service.color);
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫
        if (!hasStarted) {
          const successPatterns = [
            /server running/i,
            /started successfully/i,
            /listening on/i,
            /ready in/i,
            /Local:.*http/i
          ];

          if (successPatterns.some(pattern => pattern.test(output))) {
            hasStarted = true;
            clearTimeout(startupTimeout);
            this.log(service.name, '‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω', service.color);
            resolve();
          }
        }
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ stderr
      proc.stderr?.on('data', (data: Buffer) => {
        const output = data.toString();
        const lines = output.split('\n').filter(line => line.trim());
        
        lines.forEach(line => {
          // Vite –≤—ã–≤–æ–¥–∏—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ stderr
          if (line.includes('VITE') || line.includes('ready in')) {
            this.log(service.name, line, service.color);
            if (!hasStarted) {
              hasStarted = true;
              clearTimeout(startupTimeout);
              resolve();
            }
          } else {
            this.log(service.name, `‚ö†Ô∏è ${line}`, service.color);
          }
        });
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
      proc.on('exit', (code, signal) => {
        if (!this.isShuttingDown) {
          this.log(service.name, `‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω (–∫–æ–¥: ${code}, —Å–∏–≥–Ω–∞–ª: ${signal})`, service.color);
          this.shutdown();
        }
      });

      proc.on('error', (error) => {
        this.log(service.name, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`, service.color);
        clearTimeout(startupTimeout);
        reject(error);
      });

      // –¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞
      startupTimeout = setTimeout(() => {
        if (!hasStarted) {
          this.log(service.name, '‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞ (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É)', service.color);
          resolve(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        }
      }, 30000); // 30 —Å–µ–∫—É–Ω–¥
    });
  }

  private async shutdown() {
    if (this.isShuttingDown) return;
    
    this.isShuttingDown = true;
    console.log('\n\x1b[31müõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...\x1b[0m\n');

    for (const service of this.services) {
      if (service.process && !service.process.killed) {
        this.log(service.name, '–û—Å—Ç–∞–Ω–æ–≤–∫–∞...', service.color);
        
        try {
          // –ü—ã—Ç–∞–µ–º—Å—è graceful shutdown
          service.process.kill('SIGTERM');
          
          // –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥, –∑–∞—Ç–µ–º force kill
          await new Promise<void>((resolve) => {
            const timeout = setTimeout(() => {
              if (service.process && !service.process.killed) {
                service.process.kill('SIGKILL');
              }
              resolve();
            }, 5000);

            service.process?.on('exit', () => {
              clearTimeout(timeout);
              resolve();
            });
          });
          
          this.log(service.name, '‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', service.color);
        } catch (error: any) {
          this.log(service.name, `‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: ${error.message}`, service.color);
        }
      }
    }

    console.log('\n\x1b[32m‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\x1b[0m\n');
    process.exit(0);
  }

  public async start() {
    console.log('\x1b[1m\x1b[36m');
    console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
    console.log('‚ïë                                                              ‚ïë');
    console.log('‚ïë              üöÄ PairBot Unified Launcher v2.5.0              ‚ïë');
    console.log('‚ïë                                                              ‚ïë');
    console.log('‚ïë        –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏    ‚ïë');
    console.log('‚ïë                                                              ‚ïë');
    console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
    console.log('\x1b[0m\n');

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGINT', () => this.shutdown());
    process.on('SIGTERM', () => this.shutdown());
    process.on('uncaughtException', (error) => {
      console.error('\x1b[31m‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:\x1b[0m', error);
      this.shutdown();
    });

    try {
      console.log('\x1b[1müìã –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...\x1b[0m\n');

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
      for (const service of this.services) {
        await this.startService(service);
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 2000));
      }

      console.log('\n\x1b[1m\x1b[32m');
      console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
      console.log('‚ïë                                                              ‚ïë');
      console.log('‚ïë              ‚úÖ –í–°–ï –°–ï–†–í–ò–°–´ –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù–´!                ‚ïë');
      console.log('‚ïë                                                              ‚ïë');
      console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
      console.log('\x1b[0m');

      console.log('\n\x1b[1müìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:\x1b[0m\n');
      console.log('  \x1b[35müåê Frontend:\x1b[0m      http://localhost:5173');
      console.log('  \x1b[33müîå API Server:\x1b[0m    http://localhost:3001');
      console.log('  \x1b[36mü§ñ Bot Service:\x1b[0m   http://localhost:3002');
      console.log('\n\x1b[1müí° –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä:\x1b[0m \x1b[4mhttp://localhost:5173\x1b[0m\n');
      console.log('\x1b[90m–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤\x1b[0m\n');
      console.log('\x1b[1m' + '‚ïê'.repeat(62) + '\x1b[0m\n');

    } catch (error: any) {
      console.error('\x1b[31m‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:\x1b[0m', error.message);
      await this.shutdown();
      process.exit(1);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –ª–∞—É–Ω—á–µ—Ä–∞
const launcher = new UnifiedLauncher();
launcher.start().catch((error) => {
  console.error('\x1b[31m‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:\x1b[0m', error);
  process.exit(1);
});
