import TelegramBot from 'node-telegram-bot-api';
import { getDatabase } from '../database/schema';
import { ArbitrageOpportunity } from './types';

export class TelegramNotifier {
  private bot: TelegramBot;
  private db = getDatabase();

  constructor(token: string) {
    this.bot = new TelegramBot(token, { polling: true });
    this.setupCommands();
  }

  private setupCommands(): void {
    // Start command
    this.bot.onText(/\/start/, async (msg) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from?.id.toString();
      const telegramUsername = msg.from?.username;

      if (!telegramId) return;

      // Check if user exists
      const user = this.db.getUserByTelegramId(telegramId);

      if (user) {
        this.bot.sendMessage(
          chatId,
          `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, ${user.username}!\n\n` +
          `–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –±–æ—Ç—É.\n` +
          `–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö.`
        );
      } else {
        this.bot.sendMessage(
          chatId,
          `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto Arbitrage Bot!\n\n` +
          `–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏–≤—è–∂–∏—Ç–µ –≤–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ.\n\n` +
          `–í–∞—à Telegram ID: \`${telegramId}\`\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.`,
          { parse_mode: 'Markdown' }
        );
      }
    });

    // Help command
    this.bot.onText(/\/help/, (msg) => {
      const chatId = msg.chat.id;
      this.bot.sendMessage(
        chatId,
        `üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n` +
        `/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n` +
        `/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n` +
        `/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n` +
        `/stats - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n` +
        `–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö.`
      );
    });

    // Status command
    this.bot.onText(/\/status/, async (msg) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from?.id.toString();

      if (!telegramId) return;

      const user = this.db.getUserByTelegramId(telegramId);

      if (user) {
        const strategies = this.db.getUserStrategies(user.id);
        const activeStrategies = strategies.filter(s => s.is_active);
        const autoTradeStrategies = strategies.filter(s => s.auto_trade_enabled);

        this.bot.sendMessage(
          chatId,
          `‚úÖ –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞\n\n` +
          `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.username}\n` +
          `üìß Email: ${user.email}\n` +
          `üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: ${activeStrategies.length}\n` +
          `ü§ñ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è: ${autoTradeStrategies.length} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n` +
          `üìä –†–æ–ª—å: ${user.role === 'admin' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}`
        );
      } else {
        this.bot.sendMessage(
          chatId,
          `‚ùå –í–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.`
        );
      }
    });

    // Stats command
    this.bot.onText(/\/stats/, async (msg) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from?.id.toString();

      if (!telegramId) return;

      const user = this.db.getUserByTelegramId(telegramId);

      if (user) {
        const trades = this.db.getUserTradeHistory(user.id, 100);
        const completedTrades = trades.filter(t => t.status === 'completed');
        const totalProfit = completedTrades.reduce((sum, t) => sum + t.profit, 0);
        const avgProfit = completedTrades.length > 0 ? totalProfit / completedTrades.length : 0;

        this.bot.sendMessage(
          chatId,
          `üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n` +
          `üí∞ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${completedTrades.length}\n` +
          `‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${completedTrades.length}\n` +
          `‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${trades.filter(t => t.status === 'failed').length}\n` +
          `üíµ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: $${totalProfit.toFixed(2)}\n` +
          `üìà –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: $${avgProfit.toFixed(2)}\n` +
          `üî• –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞: $${Math.max(...completedTrades.map(t => t.profit), 0).toFixed(2)}`
        );
      } else {
        this.bot.sendMessage(
          chatId,
          `‚ùå –í–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.`
        );
      }
    });
  }

  // Send arbitrage opportunity notification to users with matching strategies
  async notifyOpportunity(opportunity: ArbitrageOpportunity): Promise<void> {
    try {
      // Get all users with active strategies
      const users = this.db.getAllUsers();
      
      for (const user of users) {
        // Skip users without Telegram
        if (!user.telegram_chat_id) continue;
        
        // Get user's active strategies
        const strategies = this.db.getUserStrategies(user.id);
        const activeStrategies = strategies.filter(s => s.is_active);
        
        // Check if opportunity matches any strategy
        for (const strategy of activeStrategies) {
          const exchanges = JSON.parse(strategy.exchanges);
          const matchesExchanges = exchanges.includes(opportunity.buyExchange) || 
                                   exchanges.includes(opportunity.sellExchange);
          const matchesProfit = opportunity.profitPercentage >= strategy.min_profit_percentage;
          
          if (matchesExchanges && matchesProfit) {
            // Send notification
            const message = this.formatOpportunityMessage(opportunity);
            await this.bot.sendMessage(user.telegram_chat_id, message, { parse_mode: 'Markdown' });
            break; // Only send one notification per user
          }
        }
      }
    } catch (error) {
      console.error('Error sending Telegram notification:', error);
    }
  }

  // Send notification to specific user
  async notifyUser(telegramId: string, title: string, message: string): Promise<void> {
    try {
      await this.bot.sendMessage(
        telegramId,
        `*${title}*\n\n${message}`,
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      console.error('Error sending user notification:', error);
    }
  }

  // Send trade execution notification
  async notifyTradeExecution(
    telegramId: string,
    symbol: string,
    buyExchange: string,
    sellExchange: string,
    profit: number,
    profitPercentage: number
  ): Promise<void> {
    try {
      const message = 
        `üéâ *–°–¥–µ–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!*\n\n` +
        `üíé –ü–∞—Ä–∞: ${symbol}\n` +
        `üì• –ü–æ–∫—É–ø–∫–∞: ${buyExchange}\n` +
        `üì§ –ü—Ä–æ–¥–∞–∂–∞: ${sellExchange}\n` +
        `üí∞ –ü—Ä–∏–±—ã–ª—å: $${profit.toFixed(2)}\n` +
        `üìä –ü—Ä–æ—Ü–µ–Ω—Ç: ${profitPercentage.toFixed(2)}%`;

      await this.bot.sendMessage(telegramId, message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('Error sending trade notification:', error);
    }
  }

  private formatOpportunityMessage(opportunity: ArbitrageOpportunity): string {
    return (
      `üöÄ *–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!*\n\n` +
      `üíé –ü–∞—Ä–∞: ${opportunity.symbol}\n` +
      `üì• –ö—É–ø–∏—Ç—å –Ω–∞: ${opportunity.buyExchange} –ø–æ $${opportunity.buyPrice.toFixed(4)}\n` +
      `üì§ –ü—Ä–æ–¥–∞—Ç—å –Ω–∞: ${opportunity.sellExchange} –ø–æ $${opportunity.sellPrice.toFixed(4)}\n` +
      `üí∞ –ü—Ä–∏–±—ã–ª—å: ${opportunity.profitPercentage.toFixed(2)}%\n` +
      `üìä –†—ã–Ω–æ–∫: ${opportunity.marketType}\n` +
      `‚è∞ –í—Ä–µ–º—è: ${new Date(opportunity.timestamp).toLocaleString('ru-RU')}`
    );
  }

  // Get bot instance for external use
  getBot(): TelegramBot {
    return this.bot;
  }
}

// Singleton instance
let notifierInstance: TelegramNotifier | null = null;

export function getTelegramNotifier(token?: string): TelegramNotifier {
  if (!notifierInstance && token) {
    notifierInstance = new TelegramNotifier(token);
  }
  if (!notifierInstance) {
    throw new Error('TelegramNotifier not initialized');
  }
  return notifierInstance;
}
