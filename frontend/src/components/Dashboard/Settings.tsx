import React, { useState, useEffect } from 'react';
import { useAuth } from '../../contexts/AuthContext';
import axios from 'axios';
import { Settings as SettingsIcon, User, Bell, Shield, Key, MessageCircle, Plus, Trash2, Unlink } from 'lucide-react';
import { ExchangeLogo } from '../common/ExchangeLogo';

interface ApiKey {
  id: number;
  exchange_name: string;
  api_key: string;
  is_active: boolean;
  created_at: string;
}

export default function Settings() {
  const { user, token, refreshUser } = useAuth();
  const [apiKeys, setApiKeys] = useState<ApiKey[]>([]);
  const [showAddKey, setShowAddKey] = useState(false);

  const [keyForm, setKeyForm] = useState({
    exchange_name: 'Binance',
    api_key: '',
    api_secret: '',
    passphrase: '',
  });

  const exchanges = ['HTX', 'Bybit', 'KuCoin', 'OKX', 'BingX'];
  const [linkingCode, setLinkingCode] = useState<string | null>(null);
  const [loadingCode, setLoadingCode] = useState(false);
  
  // Notification settings
  const [notifyOpportunities, setNotifyOpportunities] = useState(true);
  const [notifyTrades, setNotifyTrades] = useState(true);
  const [notifySystem, setNotifySystem] = useState(true);

  useEffect(() => {
    fetchApiKeys();
  }, []);

  const fetchApiKeys = async () => {
    try {
      const response = await axios.get('/api/exchange-keys', {
        headers: { Authorization: `Bearer ${token}` }
      });
      setApiKeys(response.data.keys || []);
    } catch (error) {
      console.error('Error fetching API keys:', error);
    }
  };

  const handleAddKey = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await axios.post('/api/exchange-keys', keyForm, {
        headers: { Authorization: `Bearer ${token}` }
      });
      setShowAddKey(false);
      setKeyForm({
        exchange_name: 'HTX',
        api_key: '',
        api_secret: '',
        passphrase: '',
      });
      fetchApiKeys();
      alert('API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
    } catch (error: any) {
      alert(error.response?.data?.error || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞');
    }
  };

  const handleTelegramLink = async () => {
    setLoadingCode(true);
    try {
      const response = await axios.post('/api/telegram/generate-code', {}, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      const code = response.data.code;
      setLinkingCode(code);
      
      // Open Telegram with deep link
      const botUsername = 'p4irobot';
      window.open(`https://t.me/${botUsername}?start=${code}`, '_blank');
      
      // Start polling for user data update
      const pollInterval = setInterval(async () => {
        await refreshUser();
      }, 3000); // Check every 3 seconds
      
      // Stop polling after 2 minutes
      setTimeout(() => {
        clearInterval(pollInterval);
      }, 120000);
    } catch (error) {
      console.error('Error generating linking code:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –ø—Ä–∏–≤—è–∑–∫–∏');
    } finally {
      setLoadingCode(false);
    }
  };
  
  const handleTelegramUnlink = async () => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å Telegram? –í—ã –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.')) {
      return;
    }
    
    try {
      await axios.post('/api/telegram/unlink', {}, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      await refreshUser();
      alert('Telegram —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω');
    } catch (error: any) {
      console.error('Error unlinking Telegram:', error);
      const errorMessage = error.response?.data?.error || error.response?.data?.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      alert(errorMessage);
    }
  };

  return (
    <div className="space-y-6">
      <h2 className="text-xl font-bold text-white flex items-center gap-2">
        <SettingsIcon className="w-6 h-6" />
        –ù–∞—Å—Ç—Ä–æ–π–∫–∏
      </h2>

      {/* User Info */}
      <div className="card">
        <h3 className="text-lg font-semibold text-white mb-4 flex items-center gap-2">
          <User className="w-5 h-5" />
          –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        </h3>
        <div className="space-y-3">
          <div className="flex justify-between">
            <span className="text-gray-400">–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</span>
            <span className="text-white font-medium">{user?.username}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-400">Email:</span>
            <span className="text-white font-medium">{user?.email}</span>
          </div>
        </div>
      </div>

      {/* Telegram Integration */}
      <div className="card">
        <h3 className="text-lg font-semibold text-white mb-4 flex items-center gap-2">
          <MessageCircle className="w-5 h-5" />
          –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram
        </h3>
        
        {user?.telegram_id ? (
          <div className="space-y-4">
            <div className="bg-green-900/20 border border-green-500 rounded-lg p-4">
              <div className="flex items-start justify-between mb-2">
                <div>
                  <p className="text-green-400 font-medium mb-2 flex items-center gap-2">
                    <MessageCircle className="w-4 h-4" />
                    Telegram –ø—Ä–∏–≤—è–∑–∞–Ω
                  </p>
                  <p className="text-sm text-gray-400">
                    –ê–∫–∫–∞—É–Ω—Ç: @{user.telegram_username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                  </p>
                  <p className="text-xs text-gray-500 mt-2">
                    ID: {user.telegram_id}
                  </p>
                </div>
                <button
                  onClick={handleTelegramUnlink}
                  className="px-3 py-1.5 bg-red-900/30 hover:bg-red-900/50 border border-red-500/50 text-red-400 rounded-lg text-xs font-medium transition-colors flex items-center gap-1.5"
                  title="–û—Ç–≤—è–∑–∞—Ç—å Telegram"
                >
                  <Unlink className="w-3 h-3" />
                  –û—Ç–≤—è–∑–∞—Ç—å
                </button>
              </div>
            </div>

            {/* Notification Settings */}
            <div className="bg-dark-secondary rounded-lg p-4">
              <h4 className="text-md font-semibold text-white mb-3 flex items-center gap-2">
                <Bell className="w-4 h-4" />
                –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
              </h4>
              <div className="space-y-3">
                <div className="flex items-center justify-between p-3 bg-dark-bg rounded-lg">
                  <div>
                    <p className="text-sm font-medium text-white">–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</p>
                    <p className="text-xs text-gray-400">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö</p>
                  </div>
                  <button
                    onClick={() => setNotifyOpportunities(!notifyOpportunities)}
                    className={`relative inline-flex h-8 w-14 items-center rounded-full transition-colors ${
                      notifyOpportunities ? 'bg-green-600' : 'bg-gray-600'
                    }`}
                  >
                    <span className={`inline-block h-6 w-6 transform rounded-full bg-white transition-transform ${
                      notifyOpportunities ? 'translate-x-7' : 'translate-x-1'
                    }`} />
                  </button>
                </div>
                
                <div className="flex items-center justify-between p-3 bg-dark-bg rounded-lg">
                  <div>
                    <p className="text-sm font-medium text-white">–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏</p>
                    <p className="text-xs text-gray-400">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–¥–µ–ª–∫–∞—Ö</p>
                  </div>
                  <button
                    onClick={() => setNotifyTrades(!notifyTrades)}
                    className={`relative inline-flex h-8 w-14 items-center rounded-full transition-colors ${
                      notifyTrades ? 'bg-green-600' : 'bg-gray-600'
                    }`}
                  >
                    <span className={`inline-block h-6 w-6 transform rounded-full bg-white transition-transform ${
                      notifyTrades ? 'translate-x-7' : 'translate-x-1'
                    }`} />
                  </button>
                </div>
                
                <div className="flex items-center justify-between p-3 bg-dark-bg rounded-lg">
                  <div>
                    <p className="text-sm font-medium text-white">–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</p>
                    <p className="text-xs text-gray-400">–í–∞–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</p>
                  </div>
                  <button
                    onClick={() => setNotifySystem(!notifySystem)}
                    className={`relative inline-flex h-8 w-14 items-center rounded-full transition-colors ${
                      notifySystem ? 'bg-green-600' : 'bg-gray-600'
                    }`}
                  >
                    <span className={`inline-block h-6 w-6 transform rounded-full bg-white transition-transform ${
                      notifySystem ? 'translate-x-7' : 'translate-x-1'
                    }`} />
                  </button>
                </div>
              </div>
              
              <div className="mt-4 bg-blue-900/20 border border-blue-500/30 rounded-lg p-3">
                <p className="text-xs text-blue-400">
                  üí° –°–æ–≤–µ—Ç: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏ –≤–æ –≤–∫–ª–∞–¥–∫–µ "–§–∏–ª—å—Ç—Ä—ã", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –≤—ã–≥–æ–¥–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                </p>
              </div>
            </div>
          </div>
        ) : (
          <div className="space-y-4">
            <div className="bg-blue-900/20 border border-blue-500 rounded-lg p-4">
              <p className="text-sm text-blue-400 mb-2 flex items-center gap-2">
                <Bell className="w-4 h-4" />
                –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö
              </p>
              <p className="text-xs text-gray-400 mb-3">
                –ü—Ä–∏–≤—è–∂–∏—Ç–µ Telegram –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö
              </p>
              <div className="bg-dark-secondary rounded-lg p-3">
                <p className="text-xs text-gray-400 mb-2">–ö–∞–∫ –ø—Ä–∏–≤—è–∑–∞—Ç—å:</p>
                <ol className="text-xs text-gray-300 space-y-1 list-decimal list-inside">
                  <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram" –Ω–∏–∂–µ</li>
                  <li>–í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram –±–æ—Ç @p4irobot</li>
                  <li>–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∂–µ—Ç –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç</li>
                </ol>
              </div>
            </div>

            <button 
              onClick={handleTelegramLink}
              disabled={loadingCode}
              className="btn-primary w-full flex items-center justify-center gap-2"
            >
              <MessageCircle className="w-4 h-4" />
              {loadingCode ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞...' : '–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram'}
            </button>
            
            {linkingCode && (
              <div className="bg-yellow-900/20 border border-yellow-500 rounded-lg p-3">
                <p className="text-xs text-yellow-400 mb-2">
                  ‚úÖ –ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω! –ï—Å–ª–∏ Telegram –Ω–µ –æ—Ç–∫—Ä—ã–ª—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
                </p>
                <p className="text-xs text-gray-300">
                  1. –û—Ç–∫—Ä–æ–π—Ç–µ @p4irobot –≤ Telegram<br />
                  2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: <span className="bg-dark-bg px-2 py-1 rounded font-mono">/start {linkingCode}</span>
                </p>
              </div>
            )}
          </div>
        )}
      </div>

      {/* API Keys */}
      <div className="card">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-semibold text-white flex items-center gap-2">
            <Key className="w-5 h-5" />
            API –ö–ª—é—á–∏ –±–∏—Ä–∂
          </h3>
          <button
            onClick={() => setShowAddKey(!showAddKey)}
            className="btn-primary flex items-center gap-2"
          >
            {showAddKey ? (
              <>–û—Ç–º–µ–Ω–∞</>
            ) : (
              <>
                <Plus className="w-4 h-4" />
                –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á
              </>
            )}
          </button>
        </div>

        {showAddKey && (
          <form onSubmit={handleAddKey} className="space-y-4 mb-6 p-4 bg-dark-secondary rounded-lg">
            <div>
              <label className="label">–ë–∏—Ä–∂–∞</label>
              <select
                className="input-field"
                value={keyForm.exchange_name}
                onChange={(e) => setKeyForm({ ...keyForm, exchange_name: e.target.value })}
              >
                {exchanges.map(ex => (
                  <option key={ex} value={ex}>{ex}</option>
                ))}
              </select>
            </div>

            <div>
              <label className="label">API Key</label>
              <input
                type="text"
                required
                className="input-field"
                placeholder="–í–∞—à API –∫–ª—é—á"
                value={keyForm.api_key}
                onChange={(e) => setKeyForm({ ...keyForm, api_key: e.target.value })}
              />
            </div>

            <div>
              <label className="label">API Secret</label>
              <input
                type="password"
                required
                className="input-field"
                placeholder="–í–∞—à API —Å–µ–∫—Ä–µ—Ç"
                value={keyForm.api_secret}
                onChange={(e) => setKeyForm({ ...keyForm, api_secret: e.target.value })}
              />
            </div>

            <div>
              <label className="label">Passphrase (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)</label>
              <input
                type="password"
                className="input-field"
                placeholder="Passphrase"
                value={keyForm.passphrase}
                onChange={(e) => setKeyForm({ ...keyForm, passphrase: e.target.value })}
              />
            </div>

            <div className="bg-yellow-900/20 border border-yellow-500 rounded-lg p-3">
              <p className="text-xs text-yellow-400 flex items-center gap-2">
                <Shield className="w-4 h-4" />
                –í–∞–∂–Ω–æ: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API –∫–ª—é—á–∏ –∏–º–µ—é—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –∏ —Ç–æ—Ä–≥–æ–≤–ª—é. 
                –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–∞–≤–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤!
              </p>
            </div>

            <button type="submit" className="btn-success w-full">
              –î–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á
            </button>
          </form>
        )}

        {/* API Keys List */}
        {apiKeys.length === 0 ? (
          <div className="text-center py-8">
            <Key className="w-16 h-16 mx-auto text-gray-600 mb-4" />
            <p className="text-gray-400">API –∫–ª—é—á–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</p>
          </div>
        ) : (
          <div className="space-y-2">
            {apiKeys.map((key) => (
              <div key={key.id} className="flex items-center justify-between p-3 bg-dark-secondary rounded-lg">
                <div className="flex items-center gap-3">
                  <ExchangeLogo exchange={key.exchange_name} size={40} />
                  <div>
                    <p className="font-medium text-white">{key.exchange_name}</p>
                    <p className="text-sm text-gray-400">{key.api_key}</p>
                    <p className="text-xs text-gray-500">
                      –î–æ–±–∞–≤–ª–µ–Ω: {new Date(key.created_at).toLocaleDateString('ru-RU')}
                    </p>
                  </div>
                </div>
                <span className={`px-3 py-1 rounded-full text-xs ${
                  key.is_active ? 'bg-green-900/30 text-green-400' : 'bg-gray-700 text-gray-400'
                }`}>
                  {key.is_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                </span>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}
